version: '3.8'

services:
  # PostgreSQL database with PostGIS and pgRouting
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: eco-coach-db
    environment:
      - POSTGRES_USER=${DB_USERNAME:-dbadmin}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_DB=${DB_NAME:-ecocoach}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/ddl.sql:/docker-entrypoint-initdb.d/01-ddl.sql:ro
      - ./sql/seed_weights.sql:/docker-entrypoint-initdb.d/02-seed_weights.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-dbadmin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Lambda function: Route Generation Service
  route-generator:
    build:
      context: ./lambdas/routeGenerator
      dockerfile: Dockerfile.local
    container_name: eco-coach-route-generator
    volumes:
      - ./lambdas/routeGenerator:/app:ro
      - ./.env:/app/.env:ro
    environment:
      - DB_USERNAME=${DB_USERNAME:-dbadmin}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-ecocoach}
      - DB_ENDPOINT=postgres
      - CITY_BOUNDING_BOX=${CITY_BOUNDING_BOX:-[139.6, 35.5, 140.0, 35.8]}
    ports:
      - "5001:5000"
    depends_on:
      postgres:
        condition: service_healthy

  # Lambda function: Route Serving API
  route-serve:
    build:
      context: ./lambdas/routeServe
      dockerfile: Dockerfile.local
    container_name: eco-coach-route-serve
    volumes:
      - ./lambdas/routeServe/server.js:/app/server.js:ro
      - ./.env:/app/.env:ro
    environment:
      - DB_USERNAME=${DB_USERNAME:-dbadmin}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-ecocoach}
      - DB_ENDPOINT=postgres
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy

  # Edge Lambda: Vector Tile Edge Function
  tile-edge:
    build:
      context: ./lambdas/tileEdge
      dockerfile: Dockerfile.local
    container_name: eco-coach-tile-edge
    volumes:
      - ./lambdas/tileEdge/server.js:/app/server.js:ro
      - ./.env:/app/.env:ro
    environment:
      - MAX_ZOOM_LEVEL=16
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Tile server for vector tiles
  tile-server:
    image: maptiler/tileserver-gl:latest
    container_name: eco-coach-tile-server
    ports:
      - "8081:80"
    volumes:
      - ./data/tiles:/data:ro
    depends_on:
      - route-generator

  # OSM Data Importer (runs once to initialize the database)
  osm-importer:
    build:
      context: .
      dockerfile: Dockerfile.osm-importer
    container_name: eco-coach-osm-importer
    volumes:
      - ./sql:/app/sql:ro
      - ./.env:/app/.env:ro
      - ./wait-for-it.sh:/wait-for-it.sh:ro
    environment:
      - PG_USER=${DB_USERNAME:-dbadmin}
      - PG_DB=${DB_NAME:-ecocoach}
      - PGPASSWORD=${DB_PASSWORD:-password}
      - PGHOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/wait-for-it.sh", "postgres:5432", "--", "bash", "/app/sql/import_osm.sh", "tokyo"]

  mobile-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eco-coach-mobile-app
    environment:
      - NODE_ENV=development
      - API_ENDPOINT=http://192.168.0.101:3000
      - TILE_SERVER_URL=http://192.168.0.101:8080
      - ROUTE_GENERATOR_URL=http://192.168.0.101:5001
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
      - REACT_NATIVE_PACKAGER_HOSTNAME=192.168.0.101
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
  node_modules:

networks:
  default:
    name: eco-coach-network 